/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaproject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import javax.swing.JOptionPane;


/**
 *
 * @author leoeuler
 */
public class interGui extends javax.swing.JFrame {

    /**
     * Creates new form interGui
     */
    static Graph g;
    
    static ArrayList<String> animatedPathString;
    static ArrayList<Integer> optionList;

    static ArrayList<Integer> xList, yList;

    static int ThreadChooser;

    boolean stopAnimator = false;
    static boolean animationRunning = false;
    
    int delta;
    int lineDelta;
    static String from;
    String to;
    static String src;
    static String dest;
    static String pathString;
    boolean srcFound=false;
    boolean destFound=false;
    static boolean startAnimator=false;
    public interGui() {
        initComponents();
        
        g=new Graph();
        
        src="-1";
        dest="-1";
        pathString="-1";
        
        delta=35;
        lineDelta=45;
        
        srcFound=false;
        destFound=false;
        
        
        animatedPathString = new ArrayList<>();
        optionList = new ArrayList<>();

        xList = new ArrayList<>();
        yList = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooserButtonGroup = new javax.swing.ButtonGroup();
        animationButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addVertexRadioButton = new javax.swing.JRadioButton();
        deleteVertexRadioButton = new javax.swing.JRadioButton();
        moveVertexRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        addEdgeRadioButton = new javax.swing.JRadioButton();
        deleteEdgeRadioButton = new javax.swing.JRadioButton();
        changeWeightRadioButton = new javax.swing.JRadioButton();
        newWeightField = new javax.swing.JTextField();
        vertexNameTextField = new javax.swing.JTextField();
        graphPanel = new graphPanelClass();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        StartDjikstraRadioButton = new javax.swing.JRadioButton();
        startAnimationButton = new javax.swing.JButton();
        circleButton = new javax.swing.JRadioButton();
        squareButton = new javax.swing.JRadioButton();
        triangleButton = new javax.swing.JRadioButton();
        crossButton = new javax.swing.JRadioButton();
        plusButton = new javax.swing.JRadioButton();
        stopAnimationButton = new javax.swing.JButton();
        instructionLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 168, 232));

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 21)); // NOI18N
        jLabel2.setText("Vertex");

        chooserButtonGroup.add(addVertexRadioButton);
        addVertexRadioButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        addVertexRadioButton.setText("Add vertex");
        addVertexRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVertexRadioButtonActionPerformed(evt);
            }
        });

        chooserButtonGroup.add(deleteVertexRadioButton);
        deleteVertexRadioButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        deleteVertexRadioButton.setText("Delete vertex");
        deleteVertexRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVertexRadioButtonActionPerformed(evt);
            }
        });

        chooserButtonGroup.add(moveVertexRadioButton);
        moveVertexRadioButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        moveVertexRadioButton.setText("Move vertex");
        moveVertexRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveVertexRadioButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 21)); // NOI18N
        jLabel1.setText("Edge");

        chooserButtonGroup.add(addEdgeRadioButton);
        addEdgeRadioButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        addEdgeRadioButton.setText("Add edge");
        addEdgeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeRadioButtonActionPerformed(evt);
            }
        });

        chooserButtonGroup.add(deleteEdgeRadioButton);
        deleteEdgeRadioButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        deleteEdgeRadioButton.setText("Delete edge");

        chooserButtonGroup.add(changeWeightRadioButton);
        changeWeightRadioButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        changeWeightRadioButton.setText("Change weight");

        newWeightField.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        newWeightField.setText("Enter weight");
        newWeightField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newWeightFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(changeWeightRadioButton, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteEdgeRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addEdgeRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moveVertexRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteVertexRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addVertexRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newWeightField)))
                    .addComponent(vertexNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addVertexRadioButton)
                .addGap(18, 18, 18)
                .addComponent(vertexNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(deleteVertexRadioButton)
                .addGap(18, 18, 18)
                .addComponent(moveVertexRadioButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addEdgeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteEdgeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(changeWeightRadioButton)
                .addGap(38, 38, 38)
                .addComponent(newWeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        graphPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                graphPanelMouseMoved(evt);
            }
        });
        graphPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                graphPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                graphPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                graphPanelMouseReleased(evt);
            }
        });
        graphPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                graphPanelKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 699, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(153, 168, 232));

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 21)); // NOI18N
        jLabel3.setText("Djikstra");

        chooserButtonGroup.add(StartDjikstraRadioButton);
        StartDjikstraRadioButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        StartDjikstraRadioButton.setText("Start Djikstra");

        startAnimationButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        startAnimationButton.setText("Start animation");
        startAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAnimationButtonActionPerformed(evt);
            }
        });

        animationButtonGroup.add(circleButton);
        circleButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        circleButton.setText("Circle");

        animationButtonGroup.add(squareButton);
        squareButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        squareButton.setText("Square");

        animationButtonGroup.add(triangleButton);
        triangleButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        triangleButton.setText("Triangle");

        animationButtonGroup.add(crossButton);
        crossButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        crossButton.setText("Cross");

        animationButtonGroup.add(plusButton);
        plusButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        plusButton.setText("Plus");

        stopAnimationButton.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        stopAnimationButton.setText("Stop animation");
        stopAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopAnimationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(StartDjikstraRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(circleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(triangleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(crossButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(plusButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(stopAnimationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startAnimationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(StartDjikstraRadioButton)
                .addGap(18, 18, 18)
                .addComponent(startAnimationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(circleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(squareButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(triangleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(crossButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(plusButton)
                .addGap(18, 18, 18)
                .addComponent(stopAnimationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        instructionLabel.setBackground(new java.awt.Color(155, 129, 129));
        instructionLabel.setFont(new java.awt.Font("Arial", 1, 21)); // NOI18N
        instructionLabel.setForeground(new java.awt.Color(151, 43, 43));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(instructionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(instructionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moveVertexRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveVertexRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveVertexRadioButtonActionPerformed

    private void deleteVertexRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVertexRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteVertexRadioButtonActionPerformed

    private void graphPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphPanelMouseClicked
        // TODO add your handling code here:
        int x=evt.getX();
        int y=evt.getY();
        
        System.out.println("Mouse clicked at "+x+","+y);
        
        
        if(!src.equals("-1") && !dest.equals("-1"))
        {
            srcFound = false;
            destFound = false;
            src = "-1";
            dest = "-1";
            pathString = "-1";
            
            startAnimator=false;
            
            graphPanel.repaint();
        }
        
        if(addVertexRadioButton.isSelected())
            addVertexFunction(x, y);
        
        if(deleteVertexRadioButton.isSelected())
            deleteVertexFunction(x, y);
        
        if(deleteEdgeRadioButton.isSelected())
            deleteEdgeFunction(x,y);
        
        if(changeWeightRadioButton.isSelected())
            changeWeightEdgeFunction(x,y);

        if(StartDjikstraRadioButton.isSelected())
            djikstraCallerFunction(x, y);
        
        graphPanel.repaint();
        
        
    }//GEN-LAST:event_graphPanelMouseClicked

    private void graphPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphPanelMousePressed
        // TODO add your handling code here:
        
        int x=evt.getX();
        int y=evt.getY();
        from = "-1";
        for (Map.Entry entry : g.pointsMap.entrySet()) 
        {
            String Gname = (String) entry.getKey();
            int Gx = g.pointsMap.get(Gname).get(0);
            int Gy = g.pointsMap.get(Gname).get(1);

            //if it comes under delta size then select it
            if (Math.abs(Gx - x) < delta && Math.abs(Gy - y) < delta)
                from = Gname;

        }
        System.out.println("Moused pressed and from set to "+from);
    }//GEN-LAST:event_graphPanelMousePressed

    private void graphPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphPanelMouseReleased
        // TODO add your handling code here:
        int x=evt.getX();
        int y=evt.getY();
        if(!from.equals("-1"))
        {
            to = "-1";
            for (Map.Entry entry : g.pointsMap.entrySet()) 
            {
                String Gname = (String) entry.getKey();
                int Gx = g.pointsMap.get(Gname).get(0);
                int Gy = g.pointsMap.get(Gname).get(1);

                //if it comes under delta size then select it
                if (Math.abs(Gx - x) < delta && Math.abs(Gy - y) < delta)
                    to = Gname;

            }
            System.out.println("to selected to " + to);
            
            if(addEdgeRadioButton.isSelected())
            {
                if(!from.equals("-1") && !to.equals("-1") && !from.equals(to))
                {
                    System.out.println("adding edge");
                    g.addEdge(from, to, 50);
                    g.addEdge(to, from, 50);
                }
            }
            else if(moveVertexRadioButton.isSelected())
            {
                if(!from.equals("-1") && to.equals("-1"))
                {
                    System.out.println("Moving vertex");
                    g.pointsMap.put(from, Arrays.asList(x,y));
                }
            }
            
            graphPanel.repaint();  
        }
        
    }//GEN-LAST:event_graphPanelMouseReleased

    private void addEdgeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addEdgeRadioButtonActionPerformed

    private void graphPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_graphPanelMouseMoved
        // TODO add your handling code here:
        
        if(addVertexRadioButton.isSelected())
            instructionLabel.setText("Click on the panel to add vertices ");
        
        if(deleteVertexRadioButton.isSelected())
            instructionLabel.setText("Click on the vertex to delete it ");
        
        if(moveVertexRadioButton.isSelected())
            instructionLabel.setText("Select and drag vertex to move it ");
            
        if(addEdgeRadioButton.isSelected())
            instructionLabel.setText("Select and drag the mouse to add an edge");
        
        if(deleteEdgeRadioButton.isSelected())
            instructionLabel.setText("Select an edge to delete it");
        
        if(changeWeightRadioButton.isSelected())
            instructionLabel.setText("Select an edge to change its weight");
        
        if(StartDjikstraRadioButton.isSelected())
            instructionLabel.setText("Select source and destination for djikstra");
        
        
    }//GEN-LAST:event_graphPanelMouseMoved

    private void addVertexRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVertexRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addVertexRadioButtonActionPerformed

    private void stopAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopAnimationButtonActionPerformed
        // TODO add your handling code here:
        animationRunning=false;
        
        animatedPathString = new ArrayList<>();
        optionList = new ArrayList<>();

        xList = new ArrayList<>();
        yList = new ArrayList<>();
        
        graphPanel.repaint();
    }//GEN-LAST:event_stopAnimationButtonActionPerformed

    private void startAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAnimationButtonActionPerformed
        // TODO add your handling code here:
        
        animationRunning = true;
        
//        for (int i = 0; i < animatedPathString.size(); i++)
//        {
//            ThreadChooser = i;
        if(animatedPathString.size()>=1)
        {
            ThreadChooser=animatedPathString.size()-1;
            ((graphPanelClass) graphPanel).myThreadCreator();
            graphPanel.repaint();
        }
            
//        }
    }//GEN-LAST:event_startAnimationButtonActionPerformed

    private void newWeightFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newWeightFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newWeightFieldActionPerformed

    private void graphPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_graphPanelKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_graphPanelKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interGui().setVisible(true);
            }
        });
    }
    public void addVertexFunction(int x,int y)
    {
        boolean flag=true;
        for(Map.Entry entry : g.pointsMap.entrySet())
        {
            String Gname=(String)entry.getKey();
            int Gx=g.pointsMap.get(Gname).get(0);
            int Gy=g.pointsMap.get(Gname).get(1);
            
            //if it comes under delta size then don't add
            if(Math.abs(Gx-x)<delta && Math.abs(Gy-y)<delta)
                flag=false;
        }
        
        if(flag)
        {
            if(vertexNameTextField.getText().isEmpty())
                            JOptionPane.showMessageDialog(null,"enter vertex name!!");
            else
            {
                String curName=vertexNameTextField.getText();
            g.addVertex(curName, x, y);
            }
        }
            
          
    }
    
    public void deleteVertexFunction(int x,int y)
    {
        //iterators are needed to handle concurrentModification error
        Iterator< Map.Entry< String, List<Integer>>> it = g.pointsMap.entrySet().iterator();

        while (it.hasNext()) 
        {
            Map.Entry< String, List<Integer>> entry = it.next();
            String Gname = (String) entry.getKey();
            int Gx = g.pointsMap.get(Gname).get(0);
            int Gy = g.pointsMap.get(Gname).get(1);

            //if it comes under delta size then only delete it 
            if (Math.abs(Gx - x) < delta && Math.abs(Gy - y) < delta) 
            {
                //remove it from pointsMap 
                it.remove();
                g.vertexCount--;
                
                //Remove the edges going from "Gname" 
                g.graph.keySet().removeIf(key -> key.equals(Gname));
                
                Iterator< Map.Entry<String, SortedMap<String, Integer>>> it2 = g.graph.entrySet().iterator();
                //remove all edges connecting to it
                while(it2.hasNext()) 
                {
                    Map.Entry<String, SortedMap<String, Integer>> entry2=it2.next();
                    String from = entry2.getKey();
                    
                    //remove all vertices going to "GName"
                    if(g.graph.containsKey(from) && g.graph.get(from).containsKey(Gname));
                    {
                        g.edgeCount--;
                        g.graph.get(from).keySet().removeIf(key -> key.equals(Gname));
                    }

                }
            }
        }
        
    }
    public void deleteEdgeFunction(int x,int y)
    {
        boolean once=false;
        for (Map.Entry<String, SortedMap<String, Integer>> outerEntry : g.graph.entrySet()) 
        {

            String from = outerEntry.getKey();
            SortedMap<String, Integer> innerGraph = outerEntry.getValue();
            
            for (Map.Entry<String, Integer> innerEntry : innerGraph.entrySet()) 
            {
                String to = innerEntry.getKey();
                int wt = innerEntry.getValue();
                
                if(g.pointsMap.get(from)!=null && g.pointsMap.get(to)!=null)
                {
                    int x1=g.pointsMap.get(from).get(0);
                    int y1=g.pointsMap.get(from).get(1);
                    int x2=g.pointsMap.get(to).get(0);
                    int y2=g.pointsMap.get(to).get(1);
                    double d;
                    if(Math.abs(x2-x1)<1)
                    {
                        d=lineDelta-1;
                    }
                    else
                    {
                        double m=(double)(y2-y1)/(x2-x1);
                        double c=(double)y1-m*x1;

                        double num=Math.abs(m*x + c -y);
                        double den=Math.sqrt(1+m*m);

                        d=num/den;
                    }
                    boolean f=false;
                    if((int)d<lineDelta)
                    {
                        if(y2>=y1 && x2>=x1 && x1<=x && x<=x2 && y1<=y && y<=y2)
                        {
                               f=true;
                        }
                        else if(y2<=y1 && x2<=x1 && x2<=x && x<=x1 && y2<=y && y<=y1)
                        {
                                f=true;
                        }
                        else if(y2>=y1 && x2<=x1 && x2<=x && x<=x1 && y1<=y && y<=y2)
                        {
                                f=true;
                        }
                        else if(y2<=y1 && x2>=x1 && x1<=x && x<=x2 && y2<=y && y<=y1)
                        {
                                f=true;
                        }
                        else if(Math.abs(x2-x1)<5)
                        {
                            if(y2>=y1 && y<=y2 && y>=y1)
                                f=true;
                            if(y1>=y2 && y<=y1 && y>=y2)
                                f=true;
                        }
                        else if(Math.abs(y2-y1)<5)
                        {
                            if(x2>=x1 && x<=x2 && x>=x1)
                                f=true;
                            if(x1>=x2 && x<=x1 && x>=x2)
                                f=true;
                        }
                        if(f)
                        {
                            //remove all edges going to "GName"
                            try 
                            {
                                if(g.graph.containsKey(from) && g.graph.get(from).containsKey(to));
                                {
                                    g.edgeCount--;
                                    g.graph.get(from).keySet().removeIf(key -> key.equals(to));
                                    g.graph.get(to).keySet().removeIf(key -> key.equals(from));
                                    once=true;
                                    break;
                                }
                            } 
                            catch (Exception e) 
                            {
                                System.out.println(e);
                            }
                            
                        }
                    }
                    
                }
            }
            if(once) break;
        }
    }
    
    public void changeWeightEdgeFunction(int x,int y)
    {
        boolean once=false;
        boolean exceptionChecked=false;
        for (Map.Entry<String, SortedMap<String, Integer>> outerEntry : g.graph.entrySet()) 
        {

            String from = outerEntry.getKey();
            SortedMap<String, Integer> innerGraph = outerEntry.getValue();
            
            for (Map.Entry<String, Integer> innerEntry : innerGraph.entrySet()) 
            {
                String to = innerEntry.getKey();
                int wt = innerEntry.getValue();
                
                if(g.pointsMap.get(from)!=null && g.pointsMap.get(to)!=null)
                {
                    int x1=g.pointsMap.get(from).get(0);
                    int y1=g.pointsMap.get(from).get(1);
                    int x2=g.pointsMap.get(to).get(0);
                    int y2=g.pointsMap.get(to).get(1);
                    double d;
                    
                    if(Math.abs(x2-x1)<1)
                    {
                        d=lineDelta-1;
                    }
                    else
                    {
                        double m=(double)(y2-y1)/(x2-x1);
                        double c=(double)y1-m*x1;

                        double num=Math.abs(m*x + c -y);
                        double den=Math.sqrt(1+m*m);

                        d=num/den;                    
                    }
                    boolean f=false;
                    if((int)d<lineDelta)
                    {
                        
                        if (y2 >= y1 && x2 >= x1 && x1 <= x && x <= x2 && y1 <= y && y <= y2)
                            f = true;

                        else if (y2 <= y1 && x2 <= x1 && x2 <= x && x <= x1 && y2 <= y && y <= y1)
                            f = true;

                        else if (y2 >= y1 && x2 <= x1 && x2 <= x && x <= x1 && y1 <= y && y <= y2)
                            f = true;

                        else if (y2 <= y1 && x2 >= x1 && x1 <= x && x <= x2 && y2 <= y && y <= y1)
                            f = true;

                        else if(Math.abs(x2-x1)<5)
                        {
                            if(y2>=y1 && y<=y2 && y>=y1)
                                f=true;
                            if(y1>=y2 && y<=y1 && y>=y2)
                                f=true;
                        }
                        else if(Math.abs(y2-y1)<5)
                        {
                            if(x2>=x1 && x<=x2 && x>=x1)
                                f=true;
                            if(x1>=x2 && x<=x1 && x>=x2)
                                f=true;
                        }
                        if(f)
                        {
                            //change wt all edges going to "GName"
                            try 
                            {
                                if(g.graph.containsKey(from) && g.graph.get(from).containsKey(to));
                                {
                                    try 
                                    {
                                        if(newWeightField.getText().isEmpty())
                                            throw new ExceptionHandler("Weight field cannot be empty !!");
                                        int newWeight=Integer.parseInt(newWeightField.getText().trim());
                                        if(newWeight<=0) 
                                            throw new ExceptionHandler("Enter valid weight !!");
                                    
                                        g.graph.get(from).put(to,newWeight);
                                        g.graph.get(to).put(from,newWeight);
                                        once=true;
                                        break;
                                    } 
                                    catch (Exception e) 
                                    {
                                        System.out.println("from "+from+"to "+to);
                                        JOptionPane.showMessageDialog(null,e);
                                        exceptionChecked=true;
                                        break;
                                    }
                                    
                                }
                            } 
                            catch (Exception e) 
                            {
                                System.out.println(e);
                            }
                            
                        }
                    }
                    
                    
                }
            }
                if(once || exceptionChecked) break;
                
        }
    }
    
    public void djikstraCallerFunction(int x,int y)
    {
        boolean validPoint=false;
        
        //iterators are needed to handle concurrentModification error
        Iterator< Map.Entry< String, List<Integer>>> it = g.pointsMap.entrySet().iterator();
        
        while (it.hasNext()) 
        {
            Map.Entry< String, List<Integer>> entry = it.next();
            String Gname = (String) entry.getKey();
            int Gx = g.pointsMap.get(Gname).get(0);
            int Gy = g.pointsMap.get(Gname).get(1);

            //if it comes under delta size then only select it
            if (Math.abs(Gx - x) < delta && Math.abs(Gy - y) < delta) 
            {
                if(!srcFound) 
                {
                    src=Gname;
                    srcFound=true;
                }
                else if(!destFound) 
                {
                    dest=Gname;
                    destFound=true;
                }
                validPoint=true;
                break;
            }
        }
        
        if(!validPoint || src.equals(dest))
        {
            srcFound=false;
            destFound=false;
            src="-1";
            dest="-1";
        }
        else if(srcFound && destFound)
        {
            pathString=g.djik(src, dest);
            int optionSelected=0;
            
            if(circleButton.isSelected())
            {
                optionSelected=0;
            }
            if(squareButton.isSelected())
            {
                optionSelected=1;
            }
            if(triangleButton.isSelected())
            {
                optionSelected=2;
            }
            if(crossButton.isSelected())
            {
                optionSelected=3;
            }
            if(plusButton.isSelected())
            {
                optionSelected=4;
            }
            
            pathString=g.djik(src, dest);
            animatedPathString.add(pathString);
            optionList.add(optionSelected);
            xList.add(0);
            yList.add(0);
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton StartDjikstraRadioButton;
    private javax.swing.JRadioButton addEdgeRadioButton;
    private javax.swing.JRadioButton addVertexRadioButton;
    private javax.swing.ButtonGroup animationButtonGroup;
    private javax.swing.JRadioButton changeWeightRadioButton;
    private javax.swing.ButtonGroup chooserButtonGroup;
    private javax.swing.JRadioButton circleButton;
    private javax.swing.JRadioButton crossButton;
    private javax.swing.JRadioButton deleteEdgeRadioButton;
    private javax.swing.JRadioButton deleteVertexRadioButton;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton moveVertexRadioButton;
    private javax.swing.JTextField newWeightField;
    private javax.swing.JRadioButton plusButton;
    private javax.swing.JRadioButton squareButton;
    private javax.swing.JButton startAnimationButton;
    private javax.swing.JButton stopAnimationButton;
    private javax.swing.JRadioButton triangleButton;
    private javax.swing.JTextField vertexNameTextField;
    // End of variables declaration//GEN-END:variables
}
